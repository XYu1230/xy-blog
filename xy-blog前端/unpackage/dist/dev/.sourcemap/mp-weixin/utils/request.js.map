{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\r\n * 网络请求工具类\r\n */\r\n\r\n// 获取全局应用实例\r\nconst app = getApp();\r\n\r\n// 网络请求工具类\r\nconst BASE_URL = 'http://localhost:3000/api'\r\n// 是否启用测试模式\r\nconst USE_TEST_MODE = false\r\n\r\n// 模拟数据\r\nconst mockData = {\r\n    // 用户相关\r\n    '/user/login': {\r\n        code: 200,\r\n        msg: '登录成功',\r\n        data: {\r\n            token: 'mock-token-12345',\r\n            user: {\r\n                id: 1,\r\n                username: 'testuser',\r\n                nickname: '测试用户',\r\n                avatar: '/static/default-avatar.png',\r\n                blogCount: 5,\r\n                likeCount: 12,\r\n                commentCount: 8,\r\n                createTime: '2023-06-01 10:00:00'\r\n            }\r\n        }\r\n    },\r\n    '/user/register': {\r\n        code: 200,\r\n        msg: '注册成功',\r\n        data: {\r\n            token: 'mock-token-12345',\r\n            user: {\r\n                id: 1,\r\n                username: 'testuser',\r\n                nickname: '测试用户',\r\n                avatar: '/static/default-avatar.png',\r\n                createTime: '2023-07-20 15:30:00'\r\n            }\r\n        }\r\n    },\r\n    '/user/info': {\r\n        code: 200,\r\n        msg: '获取成功',\r\n        data: {\r\n            id: 1,\r\n            username: 'testuser',\r\n            nickname: '测试用户',\r\n            avatar: '/static/default-avatar.png',\r\n            blogCount: 5,\r\n            likeCount: 12,\r\n            commentCount: 8,\r\n            createTime: '2023-06-01 10:00:00'\r\n        }\r\n    },\r\n    // 博客相关\r\n    '/blog/list': {\r\n        code: 200,\r\n        msg: '获取成功',\r\n        data: {\r\n            total: 20,\r\n            list: [\r\n                {\r\n                    id: 1,\r\n                    title: '测试博客标题1',\r\n                    content: '这是测试博客内容...',\r\n                    summary: '这是测试博客摘要1',\r\n                    commentCount: 5,\r\n                    likeCount: 10,\r\n                    tags: ['前端', 'Vue', 'JavaScript'],\r\n                    createTime: '2023-07-15 09:30:00',\r\n                    author: {\r\n                        id: 1,\r\n                        nickname: '测试用户',\r\n                        avatar: '/static/default-avatar.png'\r\n                    },\r\n                    isLiked: false\r\n                },\r\n                {\r\n                    id: 2,\r\n                    title: '测试博客标题2',\r\n                    content: '这是另一篇测试博客内容...',\r\n                    summary: '这是测试博客摘要2',\r\n                    commentCount: 2,\r\n                    likeCount: 8,\r\n                    tags: ['后端', 'Node.js'],\r\n                    createTime: '2023-07-14 14:20:00',\r\n                    author: {\r\n                        id: 2,\r\n                        nickname: '另一个用户',\r\n                        avatar: '/static/default-avatar.png'\r\n                    },\r\n                    isLiked: true\r\n                }\r\n            ]\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * 封装uni.request网络请求\r\n * @param {Object} options - 请求选项\r\n * @param {String} options.url - 请求URL\r\n * @param {String} options.method - 请求方法，默认GET\r\n * @param {Object} options.data - 请求参数\r\n * @param {Boolean} options.loading - 是否显示加载中提示\r\n */\r\nconst request = (options) => {\r\n    const {\r\n        url,\r\n        method = 'GET',\r\n        data = {},\r\n        header = {},\r\n        showLoading = true\r\n    } = options\r\n\r\n    // 真实网络请求模式\r\n    return new Promise((resolve, reject) => {\r\n        if (showLoading) {\r\n            uni.showLoading({\r\n                title: '加载中...'\r\n            })\r\n        }\r\n        \r\n        // 添加token到请求头\r\n        const token = uni.getStorageSync('token')\r\n        if (token) {\r\n            header.Authorization = 'Bearer ' + token\r\n        }\r\n        \r\n        uni.request({\r\n            url: BASE_URL + url,\r\n            method,\r\n            data,\r\n            header,\r\n            success: (res) => {\r\n                if (res.statusCode === 200) {\r\n                    resolve(res.data)\r\n                } else if (res.statusCode === 401) {\r\n                    // token过期，清除本地token并跳转登录页\r\n                    uni.removeStorageSync('token')\r\n                    uni.removeStorageSync('user')\r\n                    uni.showToast({\r\n                        title: '请重新登录',\r\n                        icon: 'none'\r\n                    })\r\n                    \r\n                    setTimeout(() => {\r\n                        uni.reroute({\r\n                            url: '/pages/login/login'\r\n                        })\r\n                    }, 1500)\r\n                    \r\n                    reject(new Error('登录已过期'))\r\n                } else {\r\n                    uni.showToast({\r\n                        title: res.data.msg || '请求失败',\r\n                        icon: 'none'\r\n                    })\r\n                    reject(new Error(res.data.msg || '请求失败'))\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                uni.showToast({\r\n                    title: '网络错误，请检查网络连接',\r\n                    icon: 'none'\r\n                })\r\n                reject(new Error('网络错误'))\r\n            },\r\n            complete: () => {\r\n                if (showLoading) {\r\n                    uni.hideLoading()\r\n                }\r\n            }\r\n        })\r\n    })\r\n};\r\n\r\nexport default {\r\n    // GET请求\r\n    get: (url, data = {}, loading = false) => {\r\n        return request({\r\n            url,\r\n            method: 'GET',\r\n            data,\r\n            loading\r\n        });\r\n    },\r\n    \r\n    // POST请求\r\n    post: (url, data = {}, loading = false) => {\r\n        return request({\r\n            url,\r\n            method: 'POST',\r\n            data,\r\n            loading\r\n        });\r\n    },\r\n    \r\n    // PUT请求\r\n    put: (url, data = {}, loading = false) => {\r\n        return request({\r\n            url,\r\n            method: 'PUT',\r\n            data,\r\n            loading\r\n        });\r\n    },\r\n    \r\n    // DELETE请求\r\n    delete: (url, data = {}, loading = false) => {\r\n        return request({\r\n            url,\r\n            method: 'DELETE',\r\n            data,\r\n            loading\r\n        });\r\n    }\r\n}; "],"names":["uni"],"mappings":";;AAKY,OAAS;AAGrB,MAAM,WAAW;AAwGjB,MAAM,UAAU,CAAC,YAAY;AACzB,QAAM;AAAA,IACF;AAAA,IACA,SAAS;AAAA,IACT,OAAO,CAAE;AAAA,IACT,SAAS,CAAE;AAAA,IACX,cAAc;AAAA,EACtB,IAAQ;AAGJ,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,QAAI,aAAa;AACbA,oBAAAA,MAAI,YAAY;AAAA,QACZ,OAAO;AAAA,MACvB,CAAa;AAAA,IACJ;AAGD,UAAM,QAAQA,cAAAA,MAAI,eAAe,OAAO;AACxC,QAAI,OAAO;AACP,aAAO,gBAAgB,YAAY;AAAA,IACtC;AAEDA,kBAAAA,MAAI,QAAQ;AAAA,MACR,KAAK,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,CAAC,QAAQ;AACd,YAAI,IAAI,eAAe,KAAK;AACxB,kBAAQ,IAAI,IAAI;AAAA,QACpC,WAA2B,IAAI,eAAe,KAAK;AAE/BA,wBAAG,MAAC,kBAAkB,OAAO;AAC7BA,wBAAG,MAAC,kBAAkB,MAAM;AAC5BA,wBAAAA,MAAI,UAAU;AAAA,YACV,OAAO;AAAA,YACP,MAAM;AAAA,UAC9B,CAAqB;AAED,qBAAW,MAAM;AACbA,0BAAAA,MAAI,QAAQ;AAAA,cACR,KAAK;AAAA,YACjC,CAAyB;AAAA,UACJ,GAAE,IAAI;AAEP,iBAAO,IAAI,MAAM,OAAO,CAAC;AAAA,QAC7C,OAAuB;AACHA,wBAAAA,MAAI,UAAU;AAAA,YACV,OAAO,IAAI,KAAK,OAAO;AAAA,YACvB,MAAM;AAAA,UAC9B,CAAqB;AACD,iBAAO,IAAI,MAAM,IAAI,KAAK,OAAO,MAAM,CAAC;AAAA,QAC3C;AAAA,MACJ;AAAA,MACD,MAAM,CAAC,QAAQ;AACXA,sBAAAA,MAAI,UAAU;AAAA,UACV,OAAO;AAAA,UACP,MAAM;AAAA,QAC1B,CAAiB;AACD,eAAO,IAAI,MAAM,MAAM,CAAC;AAAA,MAC3B;AAAA,MACD,UAAU,MAAM;AACZ,YAAI,aAAa;AACbA,wBAAAA,MAAI,YAAa;AAAA,QACpB;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACT,CAAK;AACL;AAEA,MAAe,YAAA;AAAA;AAAA,EAEX,KAAK,CAAC,KAAK,OAAO,CAAA,GAAI,UAAU,UAAU;AACtC,WAAO,QAAQ;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA,EAGD,MAAM,CAAC,KAAK,OAAO,CAAA,GAAI,UAAU,UAAU;AACvC,WAAO,QAAQ;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA,EAGD,KAAK,CAAC,KAAK,OAAO,CAAA,GAAI,UAAU,UAAU;AACtC,WAAO,QAAQ;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA,EAGD,QAAQ,CAAC,KAAK,OAAO,CAAA,GAAI,UAAU,UAAU;AACzC,WAAO,QAAQ;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACZ,CAAS;AAAA,EACJ;AACL;;"}